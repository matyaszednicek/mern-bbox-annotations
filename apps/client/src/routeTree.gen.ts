/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthorizedImport } from './routes/_authorized'
import { Route as AuthorizedIndexImport } from './routes/_authorized/index'
import { Route as AuthorizedProfileImport } from './routes/_authorized/profile'
import { Route as AuthorizedImagesImport } from './routes/_authorized/images'
import { Route as AuthorizedTasksTaskIdImport } from './routes/_authorized/tasks/$taskId'
import { Route as AuthorizedTasksTaskIdIndexImport } from './routes/_authorized/tasks/$taskId/index'
import { Route as AuthorizedTasksTaskIdImagesImageIdImport } from './routes/_authorized/tasks/$taskId/images/$imageId'

// Create Virtual Routes

const AuthorizedAboutLazyImport = createFileRoute('/_authorized/about')()

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedRoute = AuthorizedImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedIndexRoute = AuthorizedIndexImport.update({
  path: '/',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedAboutLazyRoute = AuthorizedAboutLazyImport.update({
  path: '/about',
  getParentRoute: () => AuthorizedRoute,
} as any).lazy(() =>
  import('./routes/_authorized/about.lazy').then((d) => d.Route),
)

const AuthorizedProfileRoute = AuthorizedProfileImport.update({
  path: '/profile',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedImagesRoute = AuthorizedImagesImport.update({
  path: '/images',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedTasksTaskIdRoute = AuthorizedTasksTaskIdImport.update({
  path: '/tasks/$taskId',
  getParentRoute: () => AuthorizedRoute,
} as any)

const AuthorizedTasksTaskIdIndexRoute = AuthorizedTasksTaskIdIndexImport.update(
  {
    path: '/',
    getParentRoute: () => AuthorizedTasksTaskIdRoute,
  } as any,
)

const AuthorizedTasksTaskIdImagesImageIdRoute =
  AuthorizedTasksTaskIdImagesImageIdImport.update({
    path: '/images/$imageId',
    getParentRoute: () => AuthorizedTasksTaskIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_authorized/images': {
      id: '/_authorized/images'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof AuthorizedImagesImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/profile': {
      id: '/_authorized/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthorizedProfileImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/about': {
      id: '/_authorized/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthorizedAboutLazyImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/': {
      id: '/_authorized/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthorizedIndexImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/tasks/$taskId': {
      id: '/_authorized/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof AuthorizedTasksTaskIdImport
      parentRoute: typeof AuthorizedImport
    }
    '/_authorized/tasks/$taskId/': {
      id: '/_authorized/tasks/$taskId/'
      path: '/'
      fullPath: '/tasks/$taskId/'
      preLoaderRoute: typeof AuthorizedTasksTaskIdIndexImport
      parentRoute: typeof AuthorizedTasksTaskIdImport
    }
    '/_authorized/tasks/$taskId/images/$imageId': {
      id: '/_authorized/tasks/$taskId/images/$imageId'
      path: '/images/$imageId'
      fullPath: '/tasks/$taskId/images/$imageId'
      preLoaderRoute: typeof AuthorizedTasksTaskIdImagesImageIdImport
      parentRoute: typeof AuthorizedTasksTaskIdImport
    }
  }
}

// Create and export the route tree

interface AuthorizedTasksTaskIdRouteChildren {
  AuthorizedTasksTaskIdIndexRoute: typeof AuthorizedTasksTaskIdIndexRoute
  AuthorizedTasksTaskIdImagesImageIdRoute: typeof AuthorizedTasksTaskIdImagesImageIdRoute
}

const AuthorizedTasksTaskIdRouteChildren: AuthorizedTasksTaskIdRouteChildren = {
  AuthorizedTasksTaskIdIndexRoute: AuthorizedTasksTaskIdIndexRoute,
  AuthorizedTasksTaskIdImagesImageIdRoute:
    AuthorizedTasksTaskIdImagesImageIdRoute,
}

const AuthorizedTasksTaskIdRouteWithChildren =
  AuthorizedTasksTaskIdRoute._addFileChildren(
    AuthorizedTasksTaskIdRouteChildren,
  )

interface AuthorizedRouteChildren {
  AuthorizedImagesRoute: typeof AuthorizedImagesRoute
  AuthorizedProfileRoute: typeof AuthorizedProfileRoute
  AuthorizedAboutLazyRoute: typeof AuthorizedAboutLazyRoute
  AuthorizedIndexRoute: typeof AuthorizedIndexRoute
  AuthorizedTasksTaskIdRoute: typeof AuthorizedTasksTaskIdRouteWithChildren
}

const AuthorizedRouteChildren: AuthorizedRouteChildren = {
  AuthorizedImagesRoute: AuthorizedImagesRoute,
  AuthorizedProfileRoute: AuthorizedProfileRoute,
  AuthorizedAboutLazyRoute: AuthorizedAboutLazyRoute,
  AuthorizedIndexRoute: AuthorizedIndexRoute,
  AuthorizedTasksTaskIdRoute: AuthorizedTasksTaskIdRouteWithChildren,
}

const AuthorizedRouteWithChildren = AuthorizedRoute._addFileChildren(
  AuthorizedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthorizedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/images': typeof AuthorizedImagesRoute
  '/profile': typeof AuthorizedProfileRoute
  '/about': typeof AuthorizedAboutLazyRoute
  '/': typeof AuthorizedIndexRoute
  '/tasks/$taskId': typeof AuthorizedTasksTaskIdRouteWithChildren
  '/tasks/$taskId/': typeof AuthorizedTasksTaskIdIndexRoute
  '/tasks/$taskId/images/$imageId': typeof AuthorizedTasksTaskIdImagesImageIdRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/images': typeof AuthorizedImagesRoute
  '/profile': typeof AuthorizedProfileRoute
  '/about': typeof AuthorizedAboutLazyRoute
  '/': typeof AuthorizedIndexRoute
  '/tasks/$taskId': typeof AuthorizedTasksTaskIdIndexRoute
  '/tasks/$taskId/images/$imageId': typeof AuthorizedTasksTaskIdImagesImageIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authorized': typeof AuthorizedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_authorized/images': typeof AuthorizedImagesRoute
  '/_authorized/profile': typeof AuthorizedProfileRoute
  '/_authorized/about': typeof AuthorizedAboutLazyRoute
  '/_authorized/': typeof AuthorizedIndexRoute
  '/_authorized/tasks/$taskId': typeof AuthorizedTasksTaskIdRouteWithChildren
  '/_authorized/tasks/$taskId/': typeof AuthorizedTasksTaskIdIndexRoute
  '/_authorized/tasks/$taskId/images/$imageId': typeof AuthorizedTasksTaskIdImagesImageIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/register'
    | '/images'
    | '/profile'
    | '/about'
    | '/'
    | '/tasks/$taskId'
    | '/tasks/$taskId/'
    | '/tasks/$taskId/images/$imageId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/images'
    | '/profile'
    | '/about'
    | '/'
    | '/tasks/$taskId'
    | '/tasks/$taskId/images/$imageId'
  id:
    | '__root__'
    | '/_authorized'
    | '/login'
    | '/register'
    | '/_authorized/images'
    | '/_authorized/profile'
    | '/_authorized/about'
    | '/_authorized/'
    | '/_authorized/tasks/$taskId'
    | '/_authorized/tasks/$taskId/'
    | '/_authorized/tasks/$taskId/images/$imageId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthorizedRoute: typeof AuthorizedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthorizedRoute: AuthorizedRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authorized",
        "/login",
        "/register"
      ]
    },
    "/_authorized": {
      "filePath": "_authorized.tsx",
      "children": [
        "/_authorized/images",
        "/_authorized/profile",
        "/_authorized/about",
        "/_authorized/",
        "/_authorized/tasks/$taskId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_authorized/images": {
      "filePath": "_authorized/images.tsx",
      "parent": "/_authorized"
    },
    "/_authorized/profile": {
      "filePath": "_authorized/profile.tsx",
      "parent": "/_authorized"
    },
    "/_authorized/about": {
      "filePath": "_authorized/about.lazy.tsx",
      "parent": "/_authorized"
    },
    "/_authorized/": {
      "filePath": "_authorized/index.tsx",
      "parent": "/_authorized"
    },
    "/_authorized/tasks/$taskId": {
      "filePath": "_authorized/tasks/$taskId.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/tasks/$taskId/",
        "/_authorized/tasks/$taskId/images/$imageId"
      ]
    },
    "/_authorized/tasks/$taskId/": {
      "filePath": "_authorized/tasks/$taskId/index.tsx",
      "parent": "/_authorized/tasks/$taskId"
    },
    "/_authorized/tasks/$taskId/images/$imageId": {
      "filePath": "_authorized/tasks/$taskId/images/$imageId.tsx",
      "parent": "/_authorized/tasks/$taskId"
    }
  }
}
ROUTE_MANIFEST_END */
